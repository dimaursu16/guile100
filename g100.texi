\input texinfo
@comment             **********************************************************
@setfilename         g100
@settitle            The Guile 100 Programs Project
@comment
@set utfversion      0.2
@set utfversiondate  Mar 18, 2013
@comment
@comment             This is a Texinfo file.  To convert it to Info hypertext
@comment             format, you will need the `makeinfo' program from the GNU
@comment             Texinfo package.  To produce a PDF, use `texi2pdf'. 
@comment             
@comment             
@comment             **********************************************************

@comment HISTORY:
@comment
@comment * Mar 11, 2013: initial commit.

@dircategory The Algorithmic Language Scheme
@direntry
* G100: (g100). The Guile 100 Programs Project
@end direntry

@macro newterm{term}
@cindex \term\
@dfn{\term\}
@end macro

@c @setchapternewpage odd
@setshortcontentsaftertitlepage

@titlepage
@title  The Guile 100 Programs Project
@sp 0.2
@subtitle @value{utfversion} - @value{utfversiondate}
@author Edited by Michael Gran

@page
@vskip 0pt plus 1filll
@noindent
@copyright{} 2013 by Michael Gran

@sp 0.5
@noindent
100 Guile Programs

@noindent
This work is licensed under GFDL 1.3+@*
(@url{http://www.gnu.org/licenses/fdl.html, GFDL 1.3+}).

@sp 0.5
@noindent
A Lonely Cactus Production@*
Los Angeles, California 


@end titlepage
@everyheading @| @| @thispage

@c to suppress the black boxes after overfull lines:
@finalout

@node Top, Preface, (dir), (dir)

@ifinfo

@heading The Guile 100 Programs Project

@noindent
Edited by Michael Gran@*
@copyright{} 2013 Michael Gran

@noindent
Version @value{utfversion} (@value{utfversiondate})

@end ifinfo

@ifhtml

@heading The Guile 100 Programs Project

@noindent
Version @value{utfversion} (@value{utfversiondate})

This online resource is a collection of sample programs written in GNU
Guile, an implementation of the Scheme language.

@end ifhtml

@menu
* Preface::
* Acknowledgments::
* Theme 1::
* References::
* List of Exercises::
* List of Figures::
* Index::

@detailmenu
 --- The Detailed Node Listing ---

Theme 1: ``/bin''

* Problem 1::                   Echo and Cat
* Problem 2::                   LS

@end detailmenu
@end menu

@node    Preface, Acknowledgments, Top, Top
@unnumbered Preface

This book aspires to be a useful set of examples about how one might
use @acronym{GNU} Guile. 

@node       Acknowledgments, Theme 1, Preface, Top
@unnumbered Acknowledgments

We would like to thank the many people who have helped us develop this book.

@node    Theme 1, References, Acknowledgments, Top
@chapter Theme 1: ``/bin''

Every project has to start somewhere, so I suppose we'll begin at the
beginning.

Guile can be used as a scripting language.  Programs can be written as
plain text files, and then run from the command line by using the
Guile interpreter.  As such, most scripts run on Unix-like shells will
begin with a sha-bang @code{#!} invocation.  And most scripts must
start off doing the same chores: parsing the command line, acting on
the options, and finding the files whose names appeared in the
command-line arguments.

To introduce these mundane concepts, our first theme is @emph{/bin}, e.g.
re-implementing some common Unix tools.  This will get us warmed up.

These examples should demonstrate
@itemize
@item
How to set up the sha-bang invocation for Guile scripts run from Unix
shells.
@item
How to handle command line arguments
@item
How to map file names given as command line arguments to their files
@item
How to search for files and directories
@item
How to open files, both as binary data and as encoded text data
@end itemize

And so, without further ado, here is the first problem.

@menu
* Problem 1::                   Echo and Cat
* Problem 2::                   LS
@end menu

@node    Problem 1, Problem 2, Theme 1, Theme 1
@section Problem 1: Echo and Cat

In this problem, two venerable Unix commands are re-implemented in
Scheme: @command{echo} and @command{cat}.  @command{echo} prints out
the command-line arguments, and @command{cat} prints a file to the
terminal.

@heading Echo

The @command{echo} script writes its arguments to the standard output,
followed by a <newline>.  If there are no arguments, it just prints a
<newline>.

@command{echo} has no command-line options.  Even @code{--help} and
@code{--version} are not treated as command-line options.

If any of the arguments contain the backslash character (@code{\}),
the argument is modified.  Backslash introduces an escape.  These
escapes are parsed from logical left to right.

@table @code
@item \a
Write an <alert> in place of @code{\a}.
@item \b
Write a <backspace> in place of @code{\b}.
@item \c
Suppress the <newline> that would otherwise be written after the
command-line arguments.  The @code{\c} is not written, any remaining
characters in this argument are not written, and any remaining
arguments are not written.
@item \f
Write a <form-feed> in place of @code{\f}.
@item \n
Write a <newline> in place of @code{\n}.
@item \r
Write a <carriage-return> in place of @code{\r}.
@item \t
Write a <tab> in place of @code{\t}
@item \v
Write a <vertical-tab> in place of @code{\v}.
@item \\
Write a single backslash character in place of the pair of backslash characters.
@item \0@i{num}
Write an 8-bit character corresponding to @i{num}, an octal number
between octal 0 and octal 377 (decimal 255) inclusive.
@end table

A backslash at the end of a command line argument will not be escaped.
The backslash will be written.  However, the exit value will be 1 in
this case.

A backslash followed by any other character not listed in the table,
will will not be escaped.  The backslash will be written, and the
character that follows it will be written.  However, in this
case, the exit value will be 1.

For the octal escape @code{\0}, it is important to note that this
value is not an ISO-8859-x position or a Unicode code point, but,
rather a raw 8-bit byte to be sent unencoded to the standard output.
It is up to the operator, not @command{echo}, to ensure that a
character sequence that is valid for the environments locale is being
sent.

If a @code{\0} escape is present, but is not followed by an
number, the raw byte zero is written.

If a @code{\0} escape is present and is followed by an octal
number of greater than 3 digits, only the first 3 digits will be
interpreted as being part of the escape.

If a @code{\0} escape is present and its octal value is greater than
377, print nothing. In this case, the exit value will be 1.

An octal escape may not have unnecessary initial zeros.  For example
@itemize
@item
@code{\01} should output raw byte 1
@item 
@code{\001} should output raw byte zero followed by the string ``01''
@item
@code{\0001} should output raw byte zero followed by the string ``001''
@end itemize

The digits 8 and 9 are not part of an octal escape.  For example, the
string @code{\018} shall be output as the raw byte 1 followed by the
character for the numeral 8.

Remember that command-line arguments and file names may contain any
character allowed by the current locale.

In all other cases, the exit value will be zero.

@heading Cat

@command{cat} [OPTION]... [FILE]...

@command{cat} concatenates files or standard input and prints it to
the standard output.

This version of @command{cat} supports three command-line options,
each with a short and a long form.
@table @option
@item -u --unbuffered
Do no buffering.  Write bytes from the input to the standard output
without delay as each character is read.
@item -h --help
Print out command help.
@item -v --version
Print out the program name and version number.
@end table

After the command-line options, a list of file names is expected.  The
contents of the files are printed to standard output.  No character
encoding or decoding of the contents of the files should be performed:
they should be transmitted unmodified.

If the special file name @file{-} (hyphen) is given, at that point the
contents of the standard input will be transmitted to the standard
output.

If one of the files does not exist, or if it cannot be opened, the
program will print a descriptive error message to the standard error
and will return the exit code 1.

If the program is interrupted by the SIGINT signal, the program will
be terminated and will return the exit code 130.

Otherwise, the exit code is zero.

@heading Rules and Suggestions for the Volunteer

For this exercise, only Guile's library functions can be used.  No
external libraries are allowed.

Note that Guile has two sets of functions to help parse command line
options: the @code{ice-9 getopt-long} module and the @code{srfi
srfi-37} module.  These may or may not be of use for these scripts; if
they are useful, it is preferable to use them than to roll your own

The output product will be the @command{echo} script, the
@command{cat} script, and a couple of paragraphs on lessons learned.

@node    Problem 2,  , Problem 1, Theme 1
@section Problem 2: LS

In this problem, we investigate the most famous Unix command of all
time: @command{ls}.  @command{ls} lists files or directories, and
displays their properties.

However, @command{ls} has accumulated dozens of options over the past
decades.  Implementing a feature-complete @command{ls} would takes
weeks or months of work.  So, for this week's problem, we are going to
constrain ourselves to the most important command-line options.

The command @command{ls} lists information about files, directories,
and the contents of directories.  Basically, for this challenge, the
script should operate like a limited functionality version of Posix
@command{ls}.

The script need only recognize a limited set of command-line options:
@itemize
@item
@option{-a} - display all matching files, including those whose name
begins with a period
@item
@option{-l} - use the long output format
@item
@option{-R} - recursively descend into subdirectories
@end itemize
Any other command-line arguments that begin with a hyphen should cause
an ``invalid option'' error, and the program will be terminated with a
non-zero exit code.

The command-line option @option{-R} will recursively print the
contents of any subdirectory encountered.  When this option is
requested, the script must check for infinite loops: it should error
when it enters a subdirectory whose contents have already been listed,
and a non-zero exit value should be returned.

The command-line option @option{-l} has two effects.  One, information
about the files will be printed in the long format.  Two, when given a
symbolic link to a directory, the command will print information about
the symbolic link itself and not the file or directory to which it
points.

@heading Operands

If a command-line argument does not begin with a hyphen, it is treated
as an operand.

When called without operands, the contents of the current directory
are printed.

Operands must be either the names of files, directories, or symbolic
links.  When an operand that is not one of the above is encountered,
the script should print a descriptive error and exit with a non-zero
return code.

If an operand is a file, @command{ls} will print the name of the file.
If an operand is a symbolic link to a file, the command will print the
name of the link.  If an operand is a directory, @command{ls} will
print out the contents of that directory.  If an operand is a symbolic
link to a directory, @command{ls} will print the contents of that
directory, unless the @option{-l} is given.

When printing the contents of a directory, files and directories
that begin with <period> are usually not printed.  If the command-line
option @option{-a} is given, files and directories that begin with
<period> are printed.

@heading Output

There are two output formats: the default format and the long format.

Within each directory, the files are sorted in case-insensitive
alphabetical order according to the current locale.

In the default format, the filenames are output one per line.  You can
print them out in a columnar format if you like, though.

In the long format, the file information will be printed as follows

The first character will be `d' for directory, `-' for
regular file, `b' for block special file, `l' for symbolic link, `c'
for character special file, and `p' for fifo.

The second character will be `r' if the file or directory is readable
by the owner or `-' if it is not.

The third character will be `w' if the file or directory is writable
by the owner or `-' if it is not.

The fourth character will be `S' if the file is not executable and the
set-user-ID mode is set, `s' if the file is executable and the
set-user-ID mode is set, `x' if the file is executable or the
directory is searchable by the owner, or `-' otherwise.

The fifth character will be `r' if the file or directory is readable
by the group or `-' if it is not.

The sixth character will be `w' if the file or directory is writable
by the group or `-' if it is not.

The seventh character will be `S' if the file is not executable and
the set-group-ID mode is set, `s' if the file is executable and the
set-group-ID mode is set, `x' if the file is exectuable or the
directory is searchable by members of this group, or `-' otherwise.

The eighth character will be `r' if the file or directory is readable
by others or `-' otherwise.

The ninth character will be `w' if the file or directory is writable
by others or `-' otherwise.

The tenth character will be `T' if the file is a directory and the
search permission is not granted to others and the restricted
deletion flag is set, `t' if the file is a directory and the search
permission is granted to others and the restricted deletion flag is
set, `x' if the file is executable or the directory is searchable by
others, or `-' otherwise.

The eleventh character is a <space>.

The remaining elements of the line are ``<link count> <owner name>
<group name> <file size> <date and time> <pathname>''

The link count for a directory is the number of immediate
subdirectories it has plus one for itself plus one for its parent.
The link count for a file is one.

The file size is in bytes.

The date and time is in ``month day hour:sec'' format if the file has
been modified in the last six months, or ``month day year'' format
otherwise.

The pathname for links is in the format ``<link name> -> <path to
linked file or directory>''

The exit code should be zero except in those error cases described
above.

For more information about @command{ls}, you can consult The Open
Group Base Specifications Issue 6, or the documentation of any BSD or
GNU version of @command{ls}. 

@heading Rules and Suggestions for the Volunteer

@emph{It is unknown if Guile has sufficient functionality to
actually query all the information requried for the long format.  It
is up to the volunteer to discover this.}

For this exercise, only Guile's library functions can be used.  No
external libraries are allowed.

Note that there are Scheme versions of @command{ls} that exist.
Copying them is considered cheating.

Note that Guile has two sets of functions to help parse command line
options: the @code{ice-9 getopt-long} module and the @code{srfi
srfi-37} module.  You should use one of them.


@node    References, List of Exercises, Theme 1, Top
@unnumbered References

@anchor{Allen 1978}
Allen, John.  1978.  @cite{Anatomy of Lisp}. New York: McGraw-Hill.

@anchor{ANSI 1994}
@acronym{ANSI} X3.226-1994. @cite{American National Standard for Information
Systems@/---Programming Language---Common Lisp}.

@anchor{IEEE 2004}
The @acronym{IEEE} and The Open Group. 2001-2004. @cite{The Open Group Base Specifications Issue
6@/ IEEE Std 1003.1, 2004 Edition}.

@node    List of Exercises, List of Figures, References, Top
@unnumbered List of Exercises


@node    List of Figures, Index, List of Exercises, Top
@unnumbered List of Figures


@node    Index,  , List of Figures, Top
@unnumbered Index

@quotation
Any inaccuracies in this index may be explained by the fact@* 
that it has been prepared with the help of a computer. 

---Donald E. Knuth, @cite{Fundamental Algorithms}@* 
(Volume 1 of @cite{The Art of Computer Programming}) 
@end quotation

@sp 1.7

@printindex cp

@bye
