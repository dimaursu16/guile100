@node    Theme 2, Other Examples, Theme 1, Top
@chapter Theme 2: Web 1.0

@tie{}@image{img/T}he second theme in this project is ``Web 1.0'',
where we'll talk about interacting with the Internet as it existed in
the 1990s.

The 1990s began with emergence of Gopher clients and servers.  The
Internet Gopher protocol visualized the world as a series of folders.
The folders usually contained plain-text documents or media files like
@acronym{GIFs} or AU audio.  This was before both @acronym{HTML} and
@acronym{PDF}, so mixing text and graphics in a single file wasn't as
common, and, if it did occur, it was in formats such as PostScript.

The @acronym{HTTP}-and-@acronym{HTML}-based internet is linked to the
appearance of the @acronym{NCSA} Mosaic browser and the @acronym{NCSA}
@acronym{httpd} server.  There were precursors, but, as a practical
matter, 1993 was the beginning of the @acronym{HTTP}/@acronym{HTML}
web.

But, in those days, before @acronym{AJAX} or Flash, most of the
content was static @acronym{HTML} content or dynamic content created
by @acronym{CGI} scripts.  In this context, before the concept of
cookies was developed in 1994, personalization of content for
different users was not practical.

JavaScript appeared in Netscape Navigator 2.0 in 1995 and Internet
Explorer 3.0, in late 1996, but, with incompatibilities between the
two implementations.  Before 1996, almost all content was static and
generated on the server side.  This early Web had a more strongly
defined separation between client and server.

The early Web pages had stylistic quirks that are less common today.
Before @acronym{CSS2}, Web page layouts were often created by using
tables.  Blinking text, animated @acronym{GIFs}, embedded
@acronym{MIDI} tunes were common.

By the end of the decade, Linux, Apache, MySQL, and @acronym{PHP} were
all quite functional.  Those programs, in conjunction with Perl, which
first appeared in the 80s, became the building blocks of the famous
@acronym{LAMP} stack.  This free, open software stack allowed for some
of the common types of interactivity to which we have become
accustomed.

@acronym{PHP} used a model that allowed for rapid generation of Web
pages, where code was embedded within otherwise static @acronym{HTML}
web pages.  When those pages were requested, the embedded
@acronym{PHP} code was run, and its output became @acronym{HTML}
content.

So, in our second theme we'll imagine what the world would have been
like if @acronym{GUILE} were part of the ecosystem that made up the
1990s Internet experience.  Specifically, we'll take a look at using
Guile for
@itemize
@item
on-the-fly evaluation of code embedded within @acronym{HTML} documents
@item
the Internet Gopher protocol
@item
@acronym{CGI} scripting
@item
the Linux Apache @acronym{GUILE} @acronym{MySQL} stack
@item
and the animated @acronym{GIF} format.
@end itemize

And away we go.

@menu
* Problem 5::                   PHP-Style GUILE
* Problem 6::                   CGI and MySQL
* Problem 7::                   Animated GIFs
@end menu

@node Problem 5, Problem 6, Theme 2, Theme 2
@section Problem 5: PHP-Style GUILE

This challenge is to write a CGI script that
@enumerate
@item
receives a filename as a parameter
@item
passes a file by that filename through a preprocessor called @emph{eguile}
@item
and returns the output to the CGI client.
@end enumerate

But why @emph{eguile}?

One of the programming paradigms of Web 1.0 was the @acronym{PHP}
programming model, where code was embedded within @acronym{HTML}.  The
code was run when a client requested the file from the server, and any
output printed by the execution of the code became embedded in the
@acronym{HTML} when it was sent to the client. The code enclosed
between the @code{<?php} and @code{?>} tags is evaluated when the file
is requested.  Anything printed to stdout appears in the @acronym{HTML}
document.

@verbatim
<!DOCTYPE html>
<html>
  <body>

    <?php
      echo "My first PHP script!";
    ?>

  </body>
</html>
@end verbatim

When it first arrived on the scene, PHP was CGI executable.

The side effect of today's challenge is to re-create the PHP
programming model in Guile, making something like the following
possible.

@verbatim
<!DOCTYPE html>
<html>
  <body>
    <p>
      <?scm
        (display "A Guile Script!")
      ?>
    </p>
    <p>
      <?scm:d "A string" ?>
    </p>
  </body>
</html>
@end verbatim

@heading Mixing HTML and Scheme

To start, there is an abandonware project called @dfn{Eguile}.  When
given a file that is a mix of @acronym{HTML} and of Guile code, it can
run it @acronym{PHP} style.  The HTML text will be passed through
unmodified to the output, and Scheme code will be executed, and
anything that the Scheme code displays to the current output port will
be passed through as well.

Eguile does this by recognizing two new tags.
@itemize
@item
@samp{<?scm} and @samp{?>} enclose Scheme code, which Eguile
will pass to Guile for evaluation.
@item
@samp{<?scm:d} and @samp{?>} also
enclose Scheme code to be evaluated, just like the @samp{<?scm} tags.
Additionally, Eguile will display the value of the last expression
using the @code{display} procedure.
@end itemize

@heading Making a CGI Script

Eguile by itself is not a complete solution.  It can run mixed
@acronym{HTML} and Guile code through the Guile interpreter, but, it
doesn't have any hooks to connect it to the webserver.

To make this happen, we can add some framework code to have Eguile run
as part of a @acronym{CGI} script.

The quickest way to make a @acronym{CGI} script is to use the
functions provided by the @dfn{Guile-WWW} project.  Guile-WWW has
routines that provide @acronym{CGI} functionality.

Thus, we'll be creating a Scheme script that uses Guile-WWW for
@acronym{CGI} processing and that includes an updated version of
Eguile.

@heading URL Parsing

We'll call this script @file{ghp.cgi}. @acronym{ghp} is short for
Guile HTML Processor.  For any basic webserver, you can put the
@file{ghp.cgi} in the @file{cgi-bin} directory, and run it by pointing
your browser to something like
@indicateurl{http://localhost/cgi-bin/ghp.cgi}.

But @css{bold, wait}!  We have to tell @file{ghp.cgi} what
HTML-and-Scheme file it needs to process and output.  One way is to
have @file{ghp.cgi} parse any extra path information at the end of its
@acronym{URL}.

That script can parse extra path information is given after the script
name, like so:

@indicateurl{http://localhost/cgi-bin/ghp.cgi/@strong{FILENAME}}

Any normal webserver should put the extra path information for the
@acronym{CGI} script in the @env{PATH_INFO} environment variable.

The @file{ghp.cgi} script should load an @acronym{HTML}-and-Guile file
named @var{FILENAME} from some sensible default path, process it
through Eguile, and then serve it back to the client.

Like any sane @acronym{CGI} script that processes a @acronym{URL},
@file{ghp.cgi} should strip out any @file{/../} in the path, or maybe
just fail if there are @file{/../} in the path.

@heading The Task at Hand

The task is to write a @acronym{CGI} script that
@enumerate
@item
inspects its @env{PATH_INFO} to see if an extra filename appears at
the end of the @acronym{URL} used to call the script
@item
passes a file by that filename through the Eguile processing procedure
@item
and sends it back to the client
@end enumerate
If a file by that filename doesn't exist, the script should return a
@acronym{HTTP} 404 ``Not Found'' error.

@* Truly, this statement of the problem will probably be much longer
than the @file{ghp.cgi} file I'm asking you to create.  But, once the
@acronym{CGI} script is in place, we can serve up mixed HTML and
Scheme content just like @acronym{PHP} 3 did way back in 1997.

You can find Guile-WWW at @url{http://nongnu.org/guile-www}.

For the moment, you can find Eguile at @*
@url{https://github.com/spk121/guile100/blob/master/code/eguile.scm}

The original source of Eguile is at @*
@url{http://woozle.org/~neale/src/eguile/}.  Remember that it is
abandonware, so don't bug the owner with questions.  We're going to
find a new home and maintainer for Eguile in the near future.

Eguile itself was based on other predecessors, like Shiro Kawai's
@dfn{ESCM}.  You can find ESCM at @*
@url{http://practical-scheme.net/vault/escm.html}.

@node Problem 6, Problem 7, Problem 5, Theme 2
@section Problem 6: MySQL

This challenge is to write one static HTML form page and one CGI
script that will add data to a MySQL database table.
@enumerate
@item
Create a static HTML page that has a form with a @emph{name} text
field and a male/female/other @emph{gender} radio button set.  The
form, when posted, will call a Guile CGI script as its action, posting
the name and gender fields.
@item
Create a CGI script that receives the form's @emph{name} and
@emph{gender} post data and adds it to a MySQL / MariaDB database.
The script will then display the entire contents of the database as a
table in HTML.
@end enumerate

You may find Guile-WWW useful when creating CGI scripts.  You can find
Guile-WWW at @url{http://nongnu.org/guile-www}.

Guile-DBI is probably the best way to access MySQL databases in Guile.
You can find it at @url{http://home.gna.org/guile-dbi/}.

@node Problem 7,  , Problem 6, Theme 2
@section Problem 7: Animated GIF Badges

A very important part of the Web 1.0 experience were the GIF badges.
These 88 by 31 pixel images were typically bright colors on a grey
background with a border to give it a raised button effect.  They had
text announcing one's loyalty to a brand of webbrowser, computer, or
political philosophy, or were used as download buttons.  They were
usually animated.

To create our Web 1.0 experience, we need animated GIF badges.  So
this week's task is to write a procedure that will create a GIF.  The
procedure will have to come in two versions: one for animated GIF and
one for static GIF.

For the static GIF case, you should assume that your input data is the
following: 
@itemize
@item
a filename for the output
@item
a palette of 256 24-bit RGB colors, perhaps stored as a vector of
unsigned integers 
@item
a two dimensional array of unsigned 8-bit
indices to the palette colors
@end itemize

For the animated GIF case, you should assume that your input data is
@itemize
@item
a filename for the output
@item
a palette of 256 24-bit RGB colors, as above
@item
a three-dimensional array of unsigned 8-bit indices
@item and a variable containing the desired millisconds per frame
@end itemize

The actual specification for GIF, GIF89a, can be found at@*
@url{http://www.w3.org/Graphics/GIF/spec-gif89a.txt}. This
specification, however, contains a lot of fields and features that
won't be needed for this specific case. On the other end of the
spectrum is the current Wikipedia page for GIF,
@url{https://en.wikipedia.org/wiki/Gif}, which, at the time of this
writeup, contains a very condensed and cryptic description of the file
format and the fields contained therein.  By merging information from
the official specification and the condensed one, it should be
possible to write a legible function that creates GIFs for the two
cases described above.

One of the trickier parts of the implementation is the LZW compression
required.  Fortunately, an implementation of LZW compression is handy,
@xref{Problem 3}: LZW Compression.

